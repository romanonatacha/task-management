{"version":3,"sources":["actions/listsActions.js","actions/cardsActions.js","actions/index.js","reducers/listsReducer.js","reducers/index.js","store/index.js","components/TrelloCard.js","components/TrelloActionButton.js","components/TrelloList.js","components/App.js","serviceWorker.js","index.js"],"names":["addList","title","type","CONSTANTS","ADD_LIST","payload","sort","droppableIdStard","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","DRAG_HAPPENED","addCard","listID","text","ADD_CARD","cardID","initialState","id","cards","listsReducer","state","action","newList","newCard","newState","map","list","find","card","splice","combineReducers","lists","store","createStore","rootReducer","CardContainer","styled","div","TrelloCard","index","String","provided","ref","innerRef","draggableProps","dragHandleProps","Card","CardContent","Typography","gutterBottom","TrelloActionButton","formOpen","openForm","setState","closeForm","e","handleInputChange","target","value","handleAddList","dispatch","props","handleAddCard","renderAddButton","buttonText","buttonTextOpacity","buttonTextColor","buttonTextBackground","onClick","style","styles","openFormButtonGroup","opacity","color","background","Icon","renderForm","placeholder","buttonTitle","minHeight","minWidth","padding","autoFocus","onBlur","onChange","resize","width","overflow","outline","border","formButtonGroup","Button","onMouseDown","variant","backgroundColor","marginLeft","cursor","this","Component","display","alignItems","borderRadius","height","paddingLeft","marginTop","connect","ListContainer","TrelloList","droppableId","droppableProps","key","App","onDragEnd","result","destination","source","body","fontFamily","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec144170.chunk.js","sourcesContent":["import { CONSTANTS } from '../actions'\r\n\r\nexport const addList = (title) => {\r\n    return {\r\n        type: CONSTANTS.ADD_LIST,\r\n        payload: title\r\n    }\r\n}\r\n\r\nexport const sort = (\r\n    droppableIdStard,\r\n    droppableIdEnd,\r\n    droppableIndexStart,\r\n    droppableIndexEnd,\r\n    draggableId\r\n) => {\r\n    return {\r\n        type: CONSTANTS.DRAG_HAPPENED,\r\n        payload: {\r\n            droppableIdStard,\r\n            droppableIdEnd,\r\n            droppableIndexStart,\r\n            droppableIndexEnd,\r\n            draggableId\r\n        }\r\n    }\r\n}","import { CONSTANTS } from '../actions'\r\n\r\nexport const addCard = (listID, text) => {\r\n    return {\r\n        type: CONSTANTS.ADD_CARD,\r\n        payload: {text, listID}\r\n    }\r\n}","export * from './listsActions'\r\nexport * from './cardsActions'\r\n\r\nexport const CONSTANTS = {\r\n    ADD_CARD: \"ADD_CARD\",\r\n    ADD_LIST: \"ADD_LIST\",\r\n    DRAG_HAPPENED: 'DRAG_HAPPENED'\r\n}","import { CONSTANTS } from '../actions'\r\n\r\nlet listID = 2\r\nlet cardID = 5\r\n\r\nconst initialState = [\r\n    {\r\n        title: 'Last Episode',\r\n        id: `list-${0}`,\r\n        cards:[\r\n            {\r\n                id: `card-${0}`,\r\n                text: 'we created a static list and a static card'\r\n            },\r\n            {\r\n                id: `card-${1}`,\r\n                text: 'this is a placeholder text'\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        title: 'This Episode',\r\n        id: `list-${1}`,\r\n        cards:[\r\n            {\r\n                id: `card-${2}`,\r\n                text: 'we will create our first reducer'\r\n            },\r\n            {\r\n                id: `card-${3}`,\r\n                text: 'and render many cards on our list with static data'\r\n            },\r\n            {\r\n                id: `card-${4}`,\r\n                text: 'this text is a placeholder again'\r\n            },\r\n        ]\r\n    }\r\n]\r\n\r\nconst listsReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n\r\n        case CONSTANTS.ADD_LIST:\r\n            const newList = {\r\n                title: action.payload,\r\n                cards: [],\r\n                id: `list-${listID}`\r\n            }\r\n            listID += 1\r\n            return [...state, newList]\r\n\r\n            case CONSTANTS.ADD_CARD: {\r\n                const newCard = {\r\n                    text: action.payload.text,\r\n                    id: `card-${cardID}`\r\n                }\r\n                cardID += 1\r\n\r\n                const newState = state.map(list => {\r\n                    if (list.id === action.payload.listID) {\r\n                        return {\r\n                            ...list,\r\n                            cards: [...list.cards, newCard]\r\n                        }\r\n                    } else {\r\n                        return list\r\n                    }\r\n                })\r\n\r\n                return newState\r\n            }\r\n            \r\n            case CONSTANTS.DRAG_HAPPENED:\r\n                const {\r\n                    droppableIdStard,\r\n                    droppableIdEnd,\r\n                    droppableIndexStart,\r\n                    droppableIndexEnd,\r\n                    draggableId\r\n                } = action.payload\r\n                const newState = [...state]\r\n                if (droppableIdStard === droppableIdEnd) {\r\n                    const list = state.find(list => droppableIdStard === list.id)\r\n                    const card = list.cards.splice(droppableIndexStart, 1)\r\n                    list.cards.splice(droppableIndexEnd, 0, ...card)\r\n                }\r\n\r\n                return newState\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default listsReducer","import { combineReducers } from 'redux'\r\nimport listsReducer from './listsReducer'\r\n\r\nexport default combineReducers({\r\n    lists: listsReducer\r\n})","import { createStore } from 'redux'\r\nimport rootReducer from '../reducers'\r\n\r\nconst store = createStore(rootReducer)\r\n\r\nexport default store","import React from 'react'\r\nimport Card from '@material-ui/core/Card'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport { Draggable } from 'react-beautiful-dnd'\r\nimport styled from 'styled-components'\r\n\r\nconst CardContainer = styled.div`\r\n    margin-bottom: 8px;\r\n`\r\n\r\nconst TrelloCard = ({ text, id, index }) => {\r\n    return (\r\n        <Draggable draggableId={String(id)} index={index}>\r\n            {(provided) => (\r\n                <CardContainer ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                    <CardContainer></CardContainer>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Typography gutterBottom>\r\n                                {text}\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n                </CardContainer>\r\n            )}\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default TrelloCard","import React, { Component } from 'react'\r\nimport { Icon, Card, Button } from '@material-ui/core'\r\nimport Textarea from 'react-textarea-autosize'\r\nimport  { connect } from 'react-redux'\r\nimport { addList, addCard } from '../actions'\r\n\r\nclass TrelloActionButton extends Component {\r\n\r\n    state = {\r\n        formOpen: false,\r\n        text: ''\r\n\r\n    }\r\n\r\n    openForm = () => {\r\n        this.setState({\r\n            formOpen: true\r\n        })\r\n    }\r\n\r\n    closeForm = e => {\r\n        this.setState({\r\n            formOpen: false\r\n        })\r\n    }\r\n\r\n    handleInputChange = e => {\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n    }\r\n\r\n    handleAddList = () => {\r\n        const { dispatch } = this.props\r\n        const { text } = this.state\r\n\r\n        if (text) {\r\n            this.setState({\r\n                text: ''\r\n            })\r\n            dispatch(addList(text))\r\n        }\r\n\r\n        return\r\n    }\r\n\r\n    handleAddCard = () => {\r\n        const { dispatch, listID } = this.props\r\n        const { text } = this.state\r\n        \r\n        if (text) {\r\n            this.setState({\r\n                text: ''\r\n            })\r\n            dispatch(addCard(listID, text))\r\n        }\r\n    }\r\n\r\n    renderAddButton = () => {\r\n        const { list } = this.props\r\n\r\n        const buttonText = list ? 'Add another list' : 'Add another card'\r\n        const buttonTextOpacity = list ? 1 : 0.5\r\n        const buttonTextColor = list ? 'white' : 'inherit'\r\n        const buttonTextBackground = list ? 'rgba(0, 0, 0, .15)' : 'inherit'\r\n\r\n        return (\r\n            <div\r\n                onClick={this.openForm}\r\n                style={{\r\n                    ...styles.openFormButtonGroup,\r\n                    opacity: buttonTextOpacity, color: buttonTextColor, background: buttonTextBackground\r\n                }}\r\n            >\r\n                <Icon>add</Icon>\r\n                <p>{buttonText }</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderForm = () => {\r\n\r\n        const { list } = this.props\r\n\r\n        const placeholder = list ? 'Enter list title...' : 'Enter a title for this card...'\r\n\r\n        const buttonTitle = list ? 'Add List' : 'Add Card'\r\n\r\n        return <div>\r\n            <Card style={{\r\n                minHeight: 80,\r\n                minWidth: 272,\r\n                padding: '6px 8px 2px'\r\n            }}>\r\n                <Textarea\r\n                    placeholder={placeholder}\r\n                    autoFocus\r\n                    onBlur={this.closeForm}\r\n                    value={this.state.text}\r\n                    onChange={this.handleInputChange}\r\n                    style={{\r\n                        resize: 'none',\r\n                        width: '100%',\r\n                        overflow: 'hidden',\r\n                        outline: 'none',\r\n                        border: 'none'\r\n                    }}\r\n                />\r\n            </Card>\r\n            <div style={styles.formButtonGroup}>\r\n                <Button\r\n                    onMouseDown={list ? this.handleAddList : this.handleAddCard}\r\n                    variant='contained'\r\n                    style={{color: 'white', backgroundColor: '#5aac44'}}\r\n                >\r\n                    {buttonTitle}{' '}\r\n                </Button>\r\n                <Icon style={{marginLeft: 8, cursor: 'pointer'}}>close</Icon>\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    render() {\r\n        return this.state.formOpen ? this.renderForm() : this.renderAddButton()\r\n    }\r\n}\r\n\r\nconst styles = {\r\n    openFormButtonGroup: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        cursor: 'pointer',\r\n        borderRadius: 3,\r\n        height: 36,\r\n        width: 272,\r\n        paddingLeft: 10 \r\n    },\r\n    formButtonGroup: {\r\n        marginTop: 8,\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    }\r\n}\r\n\r\nexport default connect()(TrelloActionButton)","import React from 'react'\r\nimport TrelloCard from './TrelloCard'\r\nimport TrelloActionButton from './TrelloActionButton'\r\nimport { Droppable } from 'react-beautiful-dnd'\r\nimport styled from 'styled-components'\r\n\r\nconst ListContainer = styled.div`\r\n    background-color: #dfe3e6;\r\n    border-radius: 3px;\r\n    width: 300px;\r\n    padding: 8px;\r\n    height: 100%;\r\n    margin-right: 8px;\r\n`\r\n\r\nconst TrelloList = ({title, cards, listID}) => {\r\n    return (\r\n        <Droppable droppableId={String(listID)}>\r\n            {provided => (\r\n                <ListContainer {...provided.droppableProps} ref={provided.innerRef}>\r\n                    <h4>{title}</h4>\r\n                    { cards.map((card, index) => (\r\n                        <TrelloCard key={card.id} index={index} text={card.text} id={card.id} />\r\n                    ))}\r\n                    <TrelloActionButton listID={listID} />\r\n                    {provided.placeholder}\r\n                </ListContainer>\r\n            )}\r\n        </Droppable>\r\n    )\r\n}\r\n\r\nexport default TrelloList","import React, { Component } from 'react'\r\nimport '../index.css'\r\nimport TrelloList from './TrelloList'\r\nimport { connect } from 'react-redux'\r\nimport TrelloActionButton from './TrelloActionButton'\r\nimport { DragDropContext } from 'react-beautiful-dnd'\r\nimport { sort } from '../actions'\r\nimport styled from 'styled-components'\r\n\r\nconst ListContainer = styled.div`\r\n  display: flex;\r\n  flex-directioon: row;\r\n`\r\n\r\nclass App extends Component {\r\n\r\n  onDragEnd = (result) => {\r\n    const { destination, source, draggableId } = result\r\n    if(!destination) {\r\n      return\r\n    }\r\n\r\n    this.props.dispatch(\r\n      sort(\r\n        source.droppableId,\r\n        destination.droppableId,\r\n        source.index,\r\n        destination.index,\r\n        draggableId\r\n      )\r\n    )\r\n  }\r\n\r\n  render() {\r\n\r\n    const { lists } = this.props\r\n\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <div style={styles.body}>\r\n          <h1 style={{color: 'white'}}>Task Manager</h1>\r\n          <ListContainer>\r\n            { lists.map(list => (\r\n              <TrelloList listID={list.id} key={list.id} title={list.title} cards={list.cards} />\r\n            ))}\r\n            <TrelloActionButton list />\r\n          </ListContainer>\r\n        </div>\r\n      </DragDropContext>\r\n    )\r\n  }\r\n}\r\n\r\nconst styles = {\r\n  body: {\r\n    fontFamily: 'Roboto'\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  lists: state.lists\r\n})\r\n\r\nexport default connect(mapStateToProps)(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport store from './store'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}